{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DestinationMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stepDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "createDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDrop",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shareCyber",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibDropStorage.Drop",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shareCyber",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibDropStorage.Drop",
          "name": "drop",
          "type": "tuple"
        }
      ],
      "name": "getMintPriceForDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMintPriceForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeSpent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stepDuration",
          "type": "uint256"
        }
      ],
      "name": "getPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ed92bceadb231521bb96756e2d439b33ec1af4c89bd4a8a962e9ef9175f6494",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5159295",
    "logsBloom": "0x
    "blockHash": "0xc71e05195e41bba146dfdab43db2460535da6b388421affd74b2c365efeb781a",
    "transactionHash": "0x6ed92bceadb231521bb96756e2d439b33ec1af4c89bd4a8a962e9ef9175f6494",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "5159295",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ce34d5a2687e25d717c1fe1e46c9ac5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DestinationMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"internalType\":\"struct LibDropStorage.Drop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"internalType\":\"struct LibDropStorage.Drop\",\"name\":\"drop\",\"type\":\"tuple\"}],\"name\":\"getMintPriceForDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMintPriceForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stepDuration\",\"type\":\"uint256\"}],\"name\":\"getPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyberDropBase.sol\":\"CyberDropBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC165 } from '../../introspection/ERC165.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from './base/ERC1155Base.sol';\\nimport { ERC1155Enumerable } from './enumerable/ERC1155Enumerable.sol';\\nimport { ERC1155Metadata } from './metadata/ERC1155Metadata.sol';\\n\\n/**\\n * @title SolidState ERC1155 implementation\\n */\\nabstract contract ERC1155 is\\n    ERC1155Base,\\n    ERC1155Enumerable,\\n    ERC1155Metadata,\\n    ERC165\\n{\\n    /**\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155Enumerable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa71dcd8a1f1a488db7e1cbf073bb0bcd2a5a24af061043f3b9284481d99056d8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe2e044ac6fc81e938ae06bea0350352472c8a77ff29ac09263d268c6610f9b00\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n        balances[account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n        _mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            balances[ids[i]][account] += amounts[i];\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n        _mintBatch(account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n        _transfer(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n                balances[token][sender] = senderBalance - amount;\\n            }\\n\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc810957aa737943338b815e4a45000f602badff5491a81f557e1f741cb966e5a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8db92a910e779b41952ea8c28ee143ccdf6d4bc43b0ca984ceda9ef67956493d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from '../base/ERC1155Base.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155Base,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        for (uint256 i; i < accounts.length(); i++) {\\n            addresses[i] = accounts.at(i);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        for (uint256 i; i < tokens.length(); i++) {\\n            ids[i] = tokens.at(i);\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155EnumerableInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xcb9cfd2b1663c96f6eada653fb403b27362a8fe23e5f8eaf4c8ffd6c9e4a446e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ff538c74c04001dadf6fe1b4d8d1f028d09f75edb52b1f21dd0c2aff688ba45\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33c415a72189dd74fcccf1a3737ed6a6991edb4ec410952adef1410a22bce57a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(uint256 id)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xbef598a8755a36981932f7cf4ada1d25890971ab7144a117c0ed88cab0511e04\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6322c9474aa916850b855eb9bce0e56e85705740e78b9e9028fccca907d235bb\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x922b91abc8972541855e56fd93468ee9f0178a68551c6b4ece6df639accf6d68\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf0fcc6093a6eb3c0254814f365cc11cb5ec8e7b66493d52a02d9892de2fc198c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xe379314dbf1cfb48fc693a904e845a56d88056376b571a52f5a54a14a390c475\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e1b641451347b1f3b7dc523fbea5c50e99793f56e3d7b11561fb56f00bc432\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x58c2a621bfa49d032bee277f6f1803b95567cb42178e33d3c0e0a04066991b62\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './BaseRelayRecipientStorage.sol';\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n  //  modifier trustedForwarderOnly() {\\n  //    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n  //    _;\\n  //  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns (bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal view virtual override returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9a115d5a38f1736963227e5533b43b8e94952ac3168eacbe67fdbe2bdd19b70c\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT =\\n    keccak256('diamond.storage.BaseRelayRecipientStorage');\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8bea5fb0d35848f9b14d2fb2c0f08a12053f053c88f4bc1a14b374192cdc2e12\",\"license\":\"MIT\"},\"contracts/CyberDropBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n//import 'hardhat/console.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\nimport './libraries/LibDropStorage.sol';\\nimport './CyberTokenMintBase.sol';\\n\\ncontract CyberDropBase is CyberTokenMintBase {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event DestinationMinted(address indexed account, uint256 indexed tokenId);\\n\\n  function getDrop(uint256 _tokenId)\\n    public\\n    view\\n    returns (LibDropStorage.Drop memory)\\n  {\\n    LibDropStorage.Drop memory drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.timeStart != 0, 'DNE');\\n\\n    return drop;\\n  }\\n\\n  function createDrop(\\n    string memory _uri,\\n    uint256 _timeStart,\\n    uint256 _timeEnd,\\n    uint256 _priceStart,\\n    uint256 _priceEnd,\\n    uint256 _stepDuration,\\n    uint256 _amountCap,\\n    uint256 _shareCyber,\\n    bytes memory _signature\\n  ) public returns (uint256 _tokenId) {\\n    require(_timeEnd - _timeStart >= _stepDuration && _stepDuration > 0, 'IT');\\n    require(_priceStart >= _priceEnd, 'IP');\\n    require(_shareCyber <= 100, 'ISO');\\n\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n    bytes memory _message = abi.encodePacked(\\n      _uri,\\n      _timeStart,\\n      _timeEnd,\\n      _priceStart,\\n      _priceEnd,\\n      _stepDuration,\\n      _amountCap,\\n      _shareCyber,\\n      sender,\\n      nonce\\n    );\\n    address recoveredAddress = keccak256(_message)\\n      .toEthSignedMessageHash()\\n      .recover(_signature);\\n    require(recoveredAddress == LibAppStorage.layout().manager, 'NM');\\n\\n    // Mint token\\n    _tokenId = LibAppStorage.layout().totalSupply.current();\\n    setTokenURI(_tokenId, _uri);\\n    LibAppStorage.layout().totalSupply.increment();\\n    LibAppStorage.layout().minterNonce[sender].increment();\\n    LibDropStorage.Drop memory drop = LibDropStorage.Drop({\\n      timeStart: _timeStart,\\n      timeEnd: _timeEnd,\\n      priceStart: _priceStart,\\n      priceEnd: _priceEnd,\\n      stepDuration: _stepDuration,\\n      amountCap: _amountCap,\\n      shareCyber: _shareCyber,\\n      creator: payable(sender),\\n      minted: 0\\n    });\\n    LibDropStorage.layout().drops[_tokenId] = drop;\\n\\n    emit DestinationMinted(sender, _tokenId);\\n\\n    return _tokenId;\\n  }\\n\\n  function mint(uint256 _tokenId) public payable returns (bool) {\\n    address sender = _msgSender();\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(\\n      block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd,\\n      'OOT'\\n    );\\n\\n    if (drop.amountCap != 0) {\\n      require(drop.minted < drop.amountCap, 'CR');\\n    }\\n\\n    uint256 price = getMintPriceForDrop(drop);\\n    require(msg.value >= price, 'IA');\\n\\n    _safeMint(sender, _tokenId, 1, '');\\n    drop.minted += 1;\\n    emit Minted(sender, _tokenId, 1);\\n\\n    uint256 amountOnCyber = (msg.value * drop.shareCyber) / 100;\\n    uint256 amountCreator = msg.value - amountOnCyber;\\n\\n    drop.creator.transfer(amountCreator);\\n    payable(LibAppStorage.layout().oncyber).transfer(amountOnCyber);\\n    return true;\\n  }\\n\\n  function getMintPriceForToken(uint256 _tokenId)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(\\n      block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd,\\n      'OOT'\\n    );\\n    if (drop.amountCap != 0) {\\n      require(drop.minted < drop.amountCap, 'CR');\\n    }\\n    return getMintPriceForDrop(drop);\\n  }\\n\\n  function getMintPriceForDrop(LibDropStorage.Drop memory drop)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 timeSpent = block.timestamp - drop.timeStart;\\n    uint256 duration = drop.timeEnd - drop.timeStart;\\n    return\\n      getPriceFor(\\n        timeSpent,\\n        duration,\\n        drop.priceStart,\\n        drop.priceEnd,\\n        drop.stepDuration\\n      );\\n  }\\n\\n  function getPriceFor(\\n    uint256 _timeSpent,\\n    uint256 _duration,\\n    uint256 _priceStart,\\n    uint256 _priceEnd,\\n    uint256 _stepDuration\\n  ) public pure returns (uint256) {\\n    // https://www.desmos.com/calculator/oajpdvew5q\\n    // f\\\\left(x\\\\right)=\\\\frac{s\\\\ \\\\cdot d\\\\ +\\\\ \\\\operatorname{mod}\\\\left(x,\\\\ g\\\\right)\\\\ \\\\cdot\\\\ \\\\left(s\\\\ -\\\\ l\\\\right)\\\\ -\\\\ x\\\\ \\\\cdot\\\\ \\\\left(s\\\\ -\\\\ l\\\\right)\\\\ \\\\ }{d}\\n    // (s * d + (x % g) * (s - l) - x * (s - l) / d\\n    return\\n      (_duration *\\n        _priceStart +\\n        (_timeSpent % _stepDuration) *\\n        (_priceStart - _priceEnd) -\\n        _timeSpent *\\n        (_priceStart - _priceEnd)) / _duration;\\n  }\\n}\\n\",\"keccak256\":\"0x9a3368a4fe04204a94ccd889b60cd98b12db5c61045669778d88bdedf1424556\",\"license\":\"MIT\"},\"contracts/CyberTokenMintBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n//import 'hardhat/console.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipient.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipientStorage.sol';\\nimport './Diamond/LibDiamond.sol';\\nimport './ERC1155URI/ERC1155URI.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\n\\ncontract CyberTokenMintBase is BaseRelayRecipient, ERC1155URI {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(\\n    address indexed account,\\n    uint256 indexed tokenId,\\n    uint256 indexed amount\\n  );\\n\\n  function initialize(\\n    string memory _uri,\\n    address _manager,\\n    address _trustedForwarder,\\n    address _opensea,\\n    address _oncyber\\n  ) public virtual {\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, 'NO');\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[\\n      type(IERC1155).interfaceId\\n    ] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return LibAppStorage.layout().totalSupply.current();\\n  }\\n\\n  function manager() public view returns (address) {\\n    return LibAppStorage.layout().manager;\\n  }\\n\\n  function oncyber() public view returns (address) {\\n    return LibAppStorage.layout().oncyber;\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256) {\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n  }\\n}\\n\",\"keccak256\":\"0x90c929be1f7b7e2574f4c14c8b99f39b2afb2c5063330b90511e55ea1d07c398\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 public constant DIAMOND_STORAGE_POSITION =\\n    keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x781cc8c5b1178471e307e8457f38b5b07926573a0c97c2debf4e567bd99e8981\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@solidstate/contracts/token/ERC1155/ERC1155.sol';\\nimport './ERC1155URIStorage.sol';\\n\\nabstract contract ERC1155URI is ERC1155 {\\n  function uri(uint256 _tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, 'ERC1155URI: tokenId not exist');\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n  }\\n\\n  function setURI(string memory newUri) internal virtual {\\n    ERC1155URIStorage.layout().uri = newUri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI)\\n    internal\\n    virtual\\n  {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x9969aae76533211524fea616fb7d92694264e6fbae130e727f71989da0ce2846\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGESLOT =\\n    keccak256('diamond.storage.ERC1155URI');\\n\\n  struct Layout {\\n    mapping(uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGESLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1dd1df65c74333a49a3aae6ae183cbea1eb75be9cd66fc6caba4cbf474b6603e\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n//import 'hardhat/console.sol';\\n\\nlibrary LibAppStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('app.storage');\\n\\n  struct Layout {\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping(address => Counters.Counter) minterNonce;\\n    address oncyber;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5f84eaec34eab499aef9888588cd9c7d4b5dd2d86f429cd3fc7e97969c580e01\",\"license\":\"MIT\"},\"contracts/libraries/LibDropStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n//import 'hardhat/console.sol';\\n\\nlibrary LibDropStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('drop.app.storage');\\n  struct Drop {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 priceStart;\\n    uint256 priceEnd;\\n    uint256 stepDuration;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    uint256 minted;\\n  }\\n\\n  struct Layout {\\n    mapping(uint256 => Drop) drops;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcdf92a125331f5db8657769d43352eb57760fa907b3a0eded47c1b0a81fea9e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615cc980620000216000396000f3fe60806040526004361061014a5760003560e01c80635c5ed16d116100b6578063a22cb4651161006f578063a22cb46514610540578063bc01188e14610569578063bd85b03914610594578063d61b0c82146105d1578063e985e9c51461060e578063f242432a1461064b5761014a565b80635c5ed16d146103df5780635e28bc541461041c5780636787d449146104595780636dcfd8411461049657806385bff2e7146104d3578063a0712d68146105105761014a565b806318160ddd1161010857806318160ddd146102a95780631b023947146102d45780632eb2c2d614610311578063481c6a751461033a5780634e1273f414610365578063572b6c05146103a25761014a565b8062fdd58e1461014f57806301ffc9a71461018c578063081cdf12146101c95780630b885ac3146102065780630e89341c1461022f57806313ba55df1461026c575b600080fd5b34801561015b57600080fd5b50610176600480360381019061017191906138be565b610674565b604051610183919061390d565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190613980565b610688565b6040516101c091906139c8565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190613bca565b6106ab565b6040516101fd919061390d565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190613ccc565b610a87565b005b34801561023b57600080fd5b5061025660048036038101906102519190613d63565b610ceb565b6040516102639190613e18565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190613d63565b610e0f565b6040516102a0919061390d565b60405180910390f35b3480156102b557600080fd5b506102be610e3c565b6040516102cb919061390d565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190613e3a565b610e56565b604051610308919061390d565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190613f2f565b610eaf565b005b34801561034657600080fd5b5061034f610f43565b60405161035c919061400d565b60405180910390f35b34801561037157600080fd5b5061038c600480360381019061038791906140eb565b610f76565b6040516103999190614221565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c49190613e3a565b61116b565b6040516103d691906139c8565b60405180910390f35b3480156103eb57600080fd5b5061040660048036038101906104019190613d63565b6111ce565b604051610413919061390d565b60405180910390f35b34801561042857600080fd5b50610443600480360381019061043e9190614366565b61135f565b604051610450919061390d565b60405180910390f35b34801561046557600080fd5b50610480600480360381019061047b9190613d63565b6113ae565b60405161048d919061445a565b60405180910390f35b3480156104a257600080fd5b506104bd60048036038101906104b89190613d63565b6114d9565b6040516104ca9190614534565b60405180910390f35b3480156104df57600080fd5b506104fa60048036038101906104f59190613e3a565b6115e1565b6040516105079190614221565b60405180910390f35b61052a60048036038101906105259190613d63565b6116e7565b60405161053791906139c8565b60405180910390f35b34801561054c57600080fd5b5061056760048036038101906105629190614582565b611a5c565b005b34801561057557600080fd5b5061057e611bd1565b60405161058b919061400d565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190613d63565b611c04565b6040516105c8919061390d565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f391906145c2565b611c2a565b604051610605919061390d565b60405180910390f35b34801561061a57600080fd5b506106356004803603810190610630919061463d565b611c9b565b60405161064291906139c8565b60405180910390f35b34801561065757600080fd5b50610672600480360381019061066d919061467d565b611d38565b005b60006106808383611dcc565b905092915050565b60006106a482610696611e9f565b611ecc90919063ffffffff16565b9050919050565b60008489896106ba9190614743565b101580156106c85750600085115b610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe906147c3565b60405180910390fd5b8587101561074a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107419061482f565b60405180910390fd5b606483111561078e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107859061489b565b60405180910390fd5b6000610798611f37565b905060006107a582610e56565b905060008c8c8c8c8c8c8c8c8a8a6040516020016107cc9a99989796959493929190614960565b60405160208183030381529060405290506000610801866107f38480519060200120611f73565b611fa390919063ffffffff16565b905061080b611fca565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390614a5c565b60405180910390fd5b6108af6108a7611fca565b600201611ff7565b94506108bb858f612005565b6108ce6108c6611fca565b60020161203a565b61091e6108d9611fca565b60030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061203a565b60006040518061012001604052808f81526020018e81526020018d81526020018c81526020018b81526020018a81526020018981526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016000815250905080610982612050565b6000016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160080155905050858573ffffffffffffffffffffffffffffffffffffffff167f889de1a576ddf6ed9570e1a2354ffe87302c20bd8af57b5bd4e3bbc84240e7f660405160405180910390a350505050509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16610aa661207d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790614ac8565b60405180910390fd5b82610b296120aa565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001610b7461207d565b60030160007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550610c06856120d7565b83610c0f611fca565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610c59611fca565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610ca3611fca565b60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60606000610cf76120fa565b60000160008481526020019081526020016000208054610d1690614b17565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4290614b17565b8015610d8f5780601f10610d6457610100808354040283529160200191610d8f565b820191906000526020600020905b815481529060010190602001808311610d7257829003601f168201915b50505050509050600081511415610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd290614b95565b60405180910390fd5b610de36120fa565b60010181604051602001610df8929190614c49565b604051602081830303815290604052915050919050565b6000610e35610e1c612127565b6001016000848152602001908152602001600020612154565b9050919050565b6000610e51610e49611fca565b600201611ff7565b905090565b6000610ea8610e63611fca565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ff7565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610eef5750610eee8533611c9b565b5b610f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2590614cdf565b60405180910390fd5b610f3c338686868686612169565b5050505050565b6000610f4d611fca565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608151835114610fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb390614d71565b60405180910390fd5b6000610fc661218d565b60000190506000845167ffffffffffffffff811115610fe857610fe76139fe565b5b6040519080825280602002602001820160405280156110165781602001602082028036833780820191505090505b50905060005b855181101561115f57600073ffffffffffffffffffffffffffffffffffffffff168682815181106110505761104f614d91565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690614e32565b60405180910390fd5b8260008683815181106110c5576110c4614d91565b5b6020026020010151815260200190815260200160002060008783815181106110f0576110ef614d91565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061114657611145614d91565b5b602002602001018181525050808060010191505061101c565b50809250505092915050565b60006111756120aa565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806111d9612050565b60000160008481526020019081526020016000209050806000015442118015611206575080600101544211155b611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90614e9e565b60405180910390fd5b600081600501541461129c57806005015481600801541061129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290614f0a565b60405180910390fd5b5b6113578160405180610120016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160088201548152505061135f565b915050919050565b6000808260000151426113729190614743565b905060008360000151846020015161138a9190614743565b90506113a58282866040015187606001518860800151611c2a565b92505050919050565b6113b6613711565b60006113c0612050565b600001600084815260200190815260200160002060405180610120016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160088201548152505090506000816000015114156114d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c790614f76565b60405180910390fd5b80915050919050565b606060006114e5612127565b60010160008481526020019081526020016000209050600061150682612154565b67ffffffffffffffff81111561151f5761151e6139fe565b5b60405190808252806020026020018201604052801561154d5781602001602082028036833780820191505090505b50905060005b61155c83612154565b8110156115d65761157681846121ba90919063ffffffff16565b82828151811061158957611588614d91565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806115ce90614f96565b915050611553565b508092505050919050565b606060006115ed612127565b60020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061163a826121d4565b67ffffffffffffffff811115611653576116526139fe565b5b6040519080825280602002602001820160405280156116815781602001602082028036833780820191505090505b50905060005b611690836121d4565b8110156116dc576116aa81846121e990919063ffffffff16565b8282815181106116bd576116bc614d91565b5b60200260200101818152505080806116d490614f96565b915050611687565b508092505050919050565b6000806116f2611f37565b905060006116fe612050565b6000016000858152602001908152602001600020905080600001544211801561172b575080600101544211155b61176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190614e9e565b60405180910390fd5b60008160050154146117c15780600501548160080154106117c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b790614f0a565b60405180910390fd5b5b600061187e8260405180610120016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160088201548152505061135f565b9050803410156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba9061502b565b60405180910390fd5b6118df8386600160405180602001604052806000815250612203565b60018260080160008282546118f4919061504b565b925050819055506001858473ffffffffffffffffffffffffffffffffffffffff167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a46000606483600601543461195591906150a1565b61195f919061512a565b90506000813461196f9190614743565b90508360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156119db573d6000803e3d6000fd5b506119e4611fca565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611a4d573d6000803e3d6000fd5b50600195505050505050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac2906151cd565b60405180910390fd5b80611ad461218d565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bc591906139c8565b60405180910390a35050565b6000611bdb611fca565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611c0e612127565b6000016000838152602001908152602001600020549050919050565b6000848385611c399190614743565b87611c4491906150a1565b8486611c509190614743565b8489611c5c91906151ed565b611c6691906150a1565b8688611c7291906150a1565b611c7c919061504b565b611c869190614743565b611c90919061512a565b905095945050505050565b6000611ca561218d565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611d785750611d778533611c9b565b5b611db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dae90614cdf565b60405180910390fd5b611dc5338686868686612224565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3490615290565b60405180910390fd5b611e4561218d565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b60006018600036905010158015611f535750611f523361116b565b5b15611f6757601436033560601c9050611f6f565b339050611f70565b5b90565b600081604051602001611f869190615327565b604051602081830303815290604052805190602001209050919050565b6000806000611fb28585612248565b91509150611fbf816122cb565b819250505092915050565b6000807f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90508091505090565b600081600001549050919050565b8061200e6120fa565b60000160008481526020019081526020016000209080519060200190612035929190613773565b505050565b6001816000016000828254019250508190555050565b6000807f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65990508091505090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99390508091505090565b806120e06120fa565b60010190805190602001906120f6929190613773565b5050565b6000807fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8390508091505090565b6000807fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea90508091505090565b6000612162826000016124a0565b9050919050565b6121778686868686866124b1565b612185868686868686612698565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b60006121c983600001836129a4565b60001c905092915050565b60006121e2826000016124a0565b9050919050565b60006121f883600001836129a4565b60001c905092915050565b61221233600086868686612a18565b61221e84848484612bff565b50505050565b612232868686868686612a18565b612240868686868686612d89565b505050505050565b60008060418351141561228a5760008060006020860151925060408601519150606086015160001a905061227e87828585613001565b945094505050506122c4565b6040835114156122bb5760008060208501519150604085015190506122b086838361310e565b9350935050506122c4565b60006002915091505b9250929050565b600060048111156122df576122de61534d565b5b8160048111156122f2576122f161534d565b5b14156122fd5761249d565b600160048111156123115761231061534d565b5b8160048111156123245761232361534d565b5b1415612365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235c906153c8565b60405180910390fd5b600260048111156123795761237861534d565b5b81600481111561238c5761238b61534d565b5b14156123cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c490615434565b60405180910390fd5b600360048111156123e1576123e061534d565b5b8160048111156123f4576123f361534d565b5b1415612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242c906154c6565b60405180910390fd5b6004808111156124485761244761534d565b5b81600481111561245b5761245a61534d565b5b141561249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390615558565b60405180910390fd5b5b50565b600081600001805490509050919050565b6124d08473ffffffffffffffffffffffffffffffffffffffff1661315c565b15612690578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016125169594939291906155cd565b602060405180830381600087803b15801561253057600080fd5b505af192505050801561256157506040513d601f19601f8201168201806040525081019061255e919061564a565b60015b6126075761256d615684565b806308c379a014156125ca57506125826156a6565b8061258d57506125cc565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c19190613e18565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fe906157ae565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461268e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268590615840565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ff906158d2565b60405180910390fd5b815183511461274c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274390615964565b60405180910390fd5b61275a86868686868661316f565b600061276461218d565b600001905060005b845181101561291c57600085828151811061278a57612789614d91565b5b6020026020010151905060008583815181106127a9576127a8614d91565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561284a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612841906159f6565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612900919061504b565b925050819055505050808061291490614f96565b91505061276c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612993929190615a16565b60405180910390a450505050505050565b6000818360000180549050116129ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e690615abf565b60405180910390fd5b826000018281548110612a0557612a04614d91565b5b9060005260206000200154905092915050565b612a378473ffffffffffffffffffffffffffffffffffffffff1661315c565b15612bf7578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612a7d959493929190615adf565b602060405180830381600087803b158015612a9757600080fd5b505af1925050508015612ac857506040513d601f19601f82011682018060405250810190612ac5919061564a565b60015b612b6e57612ad4615684565b806308c379a01415612b315750612ae96156a6565b80612af45750612b33565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b289190613e18565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b65906157ae565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bec90615840565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6690615bab565b60405180910390fd5b612c8e33600086612c7f87613185565b612c8887613185565b8661316f565b6000612c9861218d565b60000160008581526020019081526020016000209050828160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cfc919061504b565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612d7a929190615bcb565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df0906158d2565b60405180910390fd5b612e17868686612e0887613185565b612e1187613185565b8661316f565b6000612e2161218d565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb4906159f6565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f73919061504b565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612ff0929190615bcb565b60405180910390a450505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561303c576000600391509150613105565b601b8560ff16141580156130545750601c8560ff1614155b15613066576000600491509150613105565b60006001878787876040516000815260200160405260405161308b9493929190615c1f565b6020604051602081039080840390855afa1580156130ad573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156130fc57600060019250925050613105565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061314e87828885613001565b935093505050935093915050565b600080823b905060008111915050919050565b61317d8686868686866131ff565b505050505050565b60606000600167ffffffffffffffff8111156131a4576131a36139fe565b5b6040519080825280602002602001820160405280156131d25781602001602082028036833780820191505090505b50905082816000815181106131ea576131e9614d91565b5b60200260200101818152505080915050919050565b61320d868686868686613215565b505050505050565b6132238686868686866134d0565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146134c8576000613260612127565b9050600081600101905060008260020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b87518110156134c257600087828151811061331557613314614d91565b5b6020026020010151905060008111156134ae57600089838151811061333d5761333c614d91565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156133ad578187600001600083815260200190815260200160002060008282546133a1919061504b565b925050819055506133f9565b816133b88d83611dcc565b14156133f8576133e28c8760008481526020019081526020016000206134d890919063ffffffff16565b506133f6818661350890919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16141561345f578187600001600083815260200190815260200160002060008282546134539190614743565b925050819055506134ac565b600061346b8c83611dcc565b14156134ab576134958b87600084815260200190815260200160002061352290919063ffffffff16565b506134a9818561355290919063ffffffff16565b505b5b505b5080806134ba90614f96565b9150506132f7565b50505050505b505050505050565b505050505050565b6000613500836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61356c565b905092915050565b600061351a836000018360001b61356c565b905092915050565b600061354a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61367e565b905092915050565b6000613564836000018360001b61367e565b905092915050565b6000808360010160008481526020019081526020016000205490506000811461367257600060018261359e9190614743565b9050600085600001600187600001805490506135ba9190614743565b815481106135cb576135ca614d91565b5b90600052602060002001549050808660000183815481106135ef576135ee614d91565b5b906000526020600020018190555060018261360a919061504b565b866001016000838152602001908152602001600020819055508560000180548061363757613636615c64565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613678565b60009150505b92915050565b600061368a83836136ee565b6136e35782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506136e8565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b82805461377f90614b17565b90600052602060002090601f0160209004810192826137a157600085556137e8565b82601f106137ba57805160ff19168380011785556137e8565b828001600101855582156137e8579182015b828111156137e75782518255916020019190600101906137cc565b5b5090506137f591906137f9565b5090565b5b808211156138125760008160009055506001016137fa565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138558261382a565b9050919050565b6138658161384a565b811461387057600080fd5b50565b6000813590506138828161385c565b92915050565b6000819050919050565b61389b81613888565b81146138a657600080fd5b50565b6000813590506138b881613892565b92915050565b600080604083850312156138d5576138d4613820565b5b60006138e385828601613873565b92505060206138f4858286016138a9565b9150509250929050565b61390781613888565b82525050565b600060208201905061392260008301846138fe565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61395d81613928565b811461396857600080fd5b50565b60008135905061397a81613954565b92915050565b60006020828403121561399657613995613820565b5b60006139a48482850161396b565b91505092915050565b60008115159050919050565b6139c2816139ad565b82525050565b60006020820190506139dd60008301846139b9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a36826139ed565b810181811067ffffffffffffffff82111715613a5557613a546139fe565b5b80604052505050565b6000613a68613816565b9050613a748282613a2d565b919050565b600067ffffffffffffffff821115613a9457613a936139fe565b5b613a9d826139ed565b9050602081019050919050565b82818337600083830152505050565b6000613acc613ac784613a79565b613a5e565b905082815260208101848484011115613ae857613ae76139e8565b5b613af3848285613aaa565b509392505050565b600082601f830112613b1057613b0f6139e3565b5b8135613b20848260208601613ab9565b91505092915050565b600067ffffffffffffffff821115613b4457613b436139fe565b5b613b4d826139ed565b9050602081019050919050565b6000613b6d613b6884613b29565b613a5e565b905082815260208101848484011115613b8957613b886139e8565b5b613b94848285613aaa565b509392505050565b600082601f830112613bb157613bb06139e3565b5b8135613bc1848260208601613b5a565b91505092915050565b60008060008060008060008060006101208a8c031215613bed57613bec613820565b5b60008a013567ffffffffffffffff811115613c0b57613c0a613825565b5b613c178c828d01613afb565b9950506020613c288c828d016138a9565b9850506040613c398c828d016138a9565b9750506060613c4a8c828d016138a9565b9650506080613c5b8c828d016138a9565b95505060a0613c6c8c828d016138a9565b94505060c0613c7d8c828d016138a9565b93505060e0613c8e8c828d016138a9565b9250506101008a013567ffffffffffffffff811115613cb057613caf613825565b5b613cbc8c828d01613b9c565b9150509295985092959850929598565b600080600080600060a08688031215613ce857613ce7613820565b5b600086013567ffffffffffffffff811115613d0657613d05613825565b5b613d1288828901613afb565b9550506020613d2388828901613873565b9450506040613d3488828901613873565b9350506060613d4588828901613873565b9250506080613d5688828901613873565b9150509295509295909350565b600060208284031215613d7957613d78613820565b5b6000613d87848285016138a9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613dca578082015181840152602081019050613daf565b83811115613dd9576000848401525b50505050565b6000613dea82613d90565b613df48185613d9b565b9350613e04818560208601613dac565b613e0d816139ed565b840191505092915050565b60006020820190508181036000830152613e328184613ddf565b905092915050565b600060208284031215613e5057613e4f613820565b5b6000613e5e84828501613873565b91505092915050565b600067ffffffffffffffff821115613e8257613e816139fe565b5b602082029050602081019050919050565b600080fd5b6000613eab613ea684613e67565b613a5e565b90508083825260208201905060208402830185811115613ece57613ecd613e93565b5b835b81811015613ef75780613ee388826138a9565b845260208401935050602081019050613ed0565b5050509392505050565b600082601f830112613f1657613f156139e3565b5b8135613f26848260208601613e98565b91505092915050565b600080600080600060a08688031215613f4b57613f4a613820565b5b6000613f5988828901613873565b9550506020613f6a88828901613873565b945050604086013567ffffffffffffffff811115613f8b57613f8a613825565b5b613f9788828901613f01565b935050606086013567ffffffffffffffff811115613fb857613fb7613825565b5b613fc488828901613f01565b925050608086013567ffffffffffffffff811115613fe557613fe4613825565b5b613ff188828901613b9c565b9150509295509295909350565b6140078161384a565b82525050565b60006020820190506140226000830184613ffe565b92915050565b600067ffffffffffffffff821115614043576140426139fe565b5b602082029050602081019050919050565b600061406761406284614028565b613a5e565b9050808382526020820190506020840283018581111561408a57614089613e93565b5b835b818110156140b3578061409f8882613873565b84526020840193505060208101905061408c565b5050509392505050565b600082601f8301126140d2576140d16139e3565b5b81356140e2848260208601614054565b91505092915050565b6000806040838503121561410257614101613820565b5b600083013567ffffffffffffffff8111156141205761411f613825565b5b61412c858286016140bd565b925050602083013567ffffffffffffffff81111561414d5761414c613825565b5b61415985828601613f01565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61419881613888565b82525050565b60006141aa838361418f565b60208301905092915050565b6000602082019050919050565b60006141ce82614163565b6141d8818561416e565b93506141e38361417f565b8060005b838110156142145781516141fb888261419e565b9750614206836141b6565b9250506001810190506141e7565b5085935050505092915050565b6000602082019050818103600083015261423b81846141c3565b905092915050565b600080fd5b60006142538261382a565b9050919050565b61426381614248565b811461426e57600080fd5b50565b6000813590506142808161425a565b92915050565b6000610120828403121561429d5761429c614243565b5b6142a8610120613a5e565b905060006142b8848285016138a9565b60008301525060206142cc848285016138a9565b60208301525060406142e0848285016138a9565b60408301525060606142f4848285016138a9565b6060830152506080614308848285016138a9565b60808301525060a061431c848285016138a9565b60a08301525060c0614330848285016138a9565b60c08301525060e061434484828501614271565b60e083015250610100614359848285016138a9565b6101008301525092915050565b6000610120828403121561437d5761437c613820565b5b600061438b84828501614286565b91505092915050565b61439d81614248565b82525050565b610120820160008201516143ba600085018261418f565b5060208201516143cd602085018261418f565b5060408201516143e0604085018261418f565b5060608201516143f3606085018261418f565b506080820151614406608085018261418f565b5060a082015161441960a085018261418f565b5060c082015161442c60c085018261418f565b5060e082015161443f60e0850182614394565b5061010082015161445461010085018261418f565b50505050565b60006101208201905061447060008301846143a3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6144ab8161384a565b82525050565b60006144bd83836144a2565b60208301905092915050565b6000602082019050919050565b60006144e182614476565b6144eb8185614481565b93506144f683614492565b8060005b8381101561452757815161450e88826144b1565b9750614519836144c9565b9250506001810190506144fa565b5085935050505092915050565b6000602082019050818103600083015261454e81846144d6565b905092915050565b61455f816139ad565b811461456a57600080fd5b50565b60008135905061457c81614556565b92915050565b6000806040838503121561459957614598613820565b5b60006145a785828601613873565b92505060206145b88582860161456d565b9150509250929050565b600080600080600060a086880312156145de576145dd613820565b5b60006145ec888289016138a9565b95505060206145fd888289016138a9565b945050604061460e888289016138a9565b935050606061461f888289016138a9565b9250506080614630888289016138a9565b9150509295509295909350565b6000806040838503121561465457614653613820565b5b600061466285828601613873565b925050602061467385828601613873565b9150509250929050565b600080600080600060a0868803121561469957614698613820565b5b60006146a788828901613873565b95505060206146b888828901613873565b94505060406146c9888289016138a9565b93505060606146da888289016138a9565b925050608086013567ffffffffffffffff8111156146fb576146fa613825565b5b61470788828901613b9c565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061474e82613888565b915061475983613888565b92508282101561476c5761476b614714565b5b828203905092915050565b7f4954000000000000000000000000000000000000000000000000000000000000600082015250565b60006147ad600283613d9b565b91506147b882614777565b602082019050919050565b600060208201905081810360008301526147dc816147a0565b9050919050565b7f4950000000000000000000000000000000000000000000000000000000000000600082015250565b6000614819600283613d9b565b9150614824826147e3565b602082019050919050565b600060208201905081810360008301526148488161480c565b9050919050565b7f49534f0000000000000000000000000000000000000000000000000000000000600082015250565b6000614885600383613d9b565b91506148908261484f565b602082019050919050565b600060208201905081810360008301526148b481614878565b9050919050565b600081905092915050565b60006148d182613d90565b6148db81856148bb565b93506148eb818560208601613dac565b80840191505092915050565b6000819050919050565b61491261490d82613888565b6148f7565b82525050565b60008160601b9050919050565b600061493082614918565b9050919050565b600061494282614925565b9050919050565b61495a6149558261384a565b614937565b82525050565b600061496c828d6148c6565b9150614978828c614901565b602082019150614988828b614901565b602082019150614998828a614901565b6020820191506149a88289614901565b6020820191506149b88288614901565b6020820191506149c88287614901565b6020820191506149d88286614901565b6020820191506149e88285614949565b6014820191506149f88284614901565b6020820191508190509b9a5050505050505050505050565b7f4e4d000000000000000000000000000000000000000000000000000000000000600082015250565b6000614a46600283613d9b565b9150614a5182614a10565b602082019050919050565b60006020820190508181036000830152614a7581614a39565b9050919050565b7f4e4f000000000000000000000000000000000000000000000000000000000000600082015250565b6000614ab2600283613d9b565b9150614abd82614a7c565b602082019050919050565b60006020820190508181036000830152614ae181614aa5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b2f57607f821691505b60208210811415614b4357614b42614ae8565b5b50919050565b7f455243313135355552493a20746f6b656e4964206e6f74206578697374000000600082015250565b6000614b7f601d83613d9b565b9150614b8a82614b49565b602082019050919050565b60006020820190508181036000830152614bae81614b72565b9050919050565b60008190508160005260206000209050919050565b60008154614bd781614b17565b614be181866148bb565b94506001821660008114614bfc5760018114614c0d57614c40565b60ff19831686528186019350614c40565b614c1685614bb5565b60005b83811015614c3857815481890152600182019150602081019050614c19565b838801955050505b50505092915050565b6000614c558285614bca565b9150614c6182846148c6565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000614cc9602983613d9b565b9150614cd482614c6d565b604082019050919050565b60006020820190508181036000830152614cf881614cbc565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614d5b602983613d9b565b9150614d6682614cff565b604082019050919050565b60006020820190508181036000830152614d8a81614d4e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b6000614e1c603183613d9b565b9150614e2782614dc0565b604082019050919050565b60006020820190508181036000830152614e4b81614e0f565b9050919050565b7f4f4f540000000000000000000000000000000000000000000000000000000000600082015250565b6000614e88600383613d9b565b9150614e9382614e52565b602082019050919050565b60006020820190508181036000830152614eb781614e7b565b9050919050565b7f4352000000000000000000000000000000000000000000000000000000000000600082015250565b6000614ef4600283613d9b565b9150614eff82614ebe565b602082019050919050565b60006020820190508181036000830152614f2381614ee7565b9050919050565b7f444e450000000000000000000000000000000000000000000000000000000000600082015250565b6000614f60600383613d9b565b9150614f6b82614f2a565b602082019050919050565b60006020820190508181036000830152614f8f81614f53565b9050919050565b6000614fa182613888565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614fd457614fd3614714565b5b600182019050919050565b7f4941000000000000000000000000000000000000000000000000000000000000600082015250565b6000615015600283613d9b565b915061502082614fdf565b602082019050919050565b6000602082019050818103600083015261504481615008565b9050919050565b600061505682613888565b915061506183613888565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561509657615095614714565b5b828201905092915050565b60006150ac82613888565b91506150b783613888565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156150f0576150ef614714565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061513582613888565b915061514083613888565b9250826151505761514f6150fb565b5b828204905092915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006151b7602983613d9b565b91506151c28261515b565b604082019050919050565b600060208201905081810360008301526151e6816151aa565b9050919050565b60006151f882613888565b915061520383613888565b925082615213576152126150fb565b5b828206905092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b600061527a602b83613d9b565b91506152858261521e565b604082019050919050565b600060208201905081810360008301526152a98161526d565b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006152e6601c836148bb565b91506152f1826152b0565b601c82019050919050565b6000819050919050565b6000819050919050565b61532161531c826152fc565b615306565b82525050565b6000615332826152d9565b915061533e8284615310565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006153b2601883613d9b565b91506153bd8261537c565b602082019050919050565b600060208201905081810360008301526153e1816153a5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061541e601f83613d9b565b9150615429826153e8565b602082019050919050565b6000602082019050818103600083015261544d81615411565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006154b0602283613d9b565b91506154bb82615454565b604082019050919050565b600060208201905081810360008301526154df816154a3565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000615542602283613d9b565b915061554d826154e6565b604082019050919050565b6000602082019050818103600083015261557181615535565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061559f82615578565b6155a98185615583565b93506155b9818560208601613dac565b6155c2816139ed565b840191505092915050565b600060a0820190506155e26000830188613ffe565b6155ef6020830187613ffe565b818103604083015261560181866141c3565b9050818103606083015261561581856141c3565b905081810360808301526156298184615594565b90509695505050505050565b60008151905061564481613954565b92915050565b6000602082840312156156605761565f613820565b5b600061566e84828501615635565b91505092915050565b60008160e01c9050919050565b600060033d11156156a35760046000803e6156a0600051615677565b90505b90565b600060443d10156156b657615739565b6156be613816565b60043d036004823e80513d602482011167ffffffffffffffff821117156156e6575050615739565b808201805167ffffffffffffffff8111156157045750505050615739565b80602083010160043d038501811115615721575050505050615739565b61573082602001850186613a2d565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615798603483613d9b565b91506157a38261573c565b604082019050919050565b600060208201905081810360008301526157c78161578b565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061582a602883613d9b565b9150615835826157ce565b604082019050919050565b600060208201905081810360008301526158598161581d565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006158bc602583613d9b565b91506158c782615860565b604082019050919050565b600060208201905081810360008301526158eb816158af565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061594e602883613d9b565b9150615959826158f2565b604082019050919050565b6000602082019050818103600083015261597d81615941565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b60006159e0602b83613d9b565b91506159eb82615984565b604082019050919050565b60006020820190508181036000830152615a0f816159d3565b9050919050565b60006040820190508181036000830152615a3081856141c3565b90508181036020830152615a4481846141c3565b90509392505050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b6000615aa9602283613d9b565b9150615ab482615a4d565b604082019050919050565b60006020820190508181036000830152615ad881615a9c565b9050919050565b600060a082019050615af46000830188613ffe565b615b016020830187613ffe565b615b0e60408301866138fe565b615b1b60608301856138fe565b8181036080830152615b2d8184615594565b90509695505050505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615b95602183613d9b565b9150615ba082615b39565b604082019050919050565b60006020820190508181036000830152615bc481615b88565b9050919050565b6000604082019050615be060008301856138fe565b615bed60208301846138fe565b9392505050565b615bfd816152fc565b82525050565b600060ff82169050919050565b615c1981615c03565b82525050565b6000608082019050615c346000830187615bf4565b615c416020830186615c10565b615c4e6040830185615bf4565b615c5b6060830184615bf4565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122073d70f29f5ae13dd4277a9fa75700bd3c9a264ebe2b4f97ca4c9d36639faf56764736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}